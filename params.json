{
  "name": "Eiffel RemRem Publish Service",
  "tagline": "",
  "body": "REMReM (REST Mailbox for Registered Messages) is a set of tools that can be used to generate validated Eiffel messages and publish them on a RabbitMQ message bus. They can be run as micro services or as stand-alone CLI versions. For more details on the micro services and the REMReM design, see https://github.com/Ericsson/eiffel-remrem\r\n\r\n# RemRem Publish\r\n\r\n***\r\n## Compatibility\r\n* JDK 8\r\n* Tomcat 7\r\n\r\n***\r\n## How to Install?\r\nBinary is relased via [jitPack](https://jitpack.io/#Ericsson/eiffel-remrem-publish/)\r\n\r\nRemRem Publish in this repository is licensed under the [Apache License 2.0](https://raw.githubusercontent.com/ericsson/eiffel-remrem-publish/master/LICENSE).\r\n\r\n***\r\n## Usage CLI (Command Line Interface)\r\n\r\n$ java -jar publish.war -h\r\n\r\nYou passed help flag.\r\n\r\nusage: java -jar\r\n\r\n -en,--exchange_name <arg>   exchange name, default is eiffel.poc\r\n\r\n -f,--content_file <arg>     event content file, mandatory\r\n\r\n -h,--help                   show help.\r\n\r\n -json,--json_content <arg>   event content in json string. The value can\r\n                              also be a dash(-) and the json will be read\r\n                              from the output of other programs if piped.\r\n\r\n -mb,--message_bus <arg>     host of message bus to use, default is\r\n                             127.0.0.1\r\n\r\n -np,--non_persistent        remove persistence from message sending\r\n\r\n -port,--port <arg>           port to connect to message bus\r\n\r\n -rk,--routing_key <arg>     routing key, mandatory\r\n\r\nFor publish we have input only from file that can contain one or more messages in a json array (surrounded with square brackets) separated by comma. \r\n\r\n**Publish on a given host, a given exchange and given routing key:**                    \r\n\r\n     $ java -jar publish.war -f publishMessages.json -en mb123-eiffelesusedl912 -mb mb123-eiffelesusedl912.docker.ericsson.com -rk test\r\n\r\n**If you want to have the message non persistent add np flag:**\r\n\r\n     $ java -jar publish.war -f publishMessages.json -en mb123-eiffelesusedl912 -mb mb123-eiffelesusedl912.docker.ericsson.com -rk test -np\r\n\r\n## Usage service\r\n\r\nRemRem Publish microservice allows for sending messages to a topic-based exchange on a RabbitMQ Server. It has an endPoint that must be called using a relative link `producer/msg`.\r\n\r\n### Configuration\r\n\r\nTwo parameters need to be provided to start the service:\r\n* rabbitmq.host (String)\r\n* rabbitmq.exchange.name (String)\r\n\r\nAn [exchange point](https://www.rabbitmq.com/tutorials/tutorial-three-java.html) must exist before you start the service.\r\n\r\nFor **stand-alone** deployment, the library can be utilized like this:\r\n\r\n    $ java -Drabbitmq.host=localhost -Drabbitmq.exchange.name=EXCHANGE_NAME -jar eiffel-remrem*\r\n\r\n\r\nBinary comes in War format which allows easy deployment in application servers such as Tomcat. In that case, these parameters must be provided to java process running tomcat. You can also provide them in the `WEB-INF/classes/application.yml` file.\r\n\r\n\r\n### REST methods\r\n\r\nThe service works on the relative link `producer/msg` and supports POST requests.\r\n\r\nYou have to specify a [routing key](https://www.rabbitmq.com/tutorials/tutorial-four-java.html) using `rk` URL parameter.\r\n\r\nThe request's body must contain a **JSON Array** with the messages.\r\n\r\n\r\n***\r\n## Testing\r\n\r\nYou can use command-line tools like [curl](https://en.wikipedia.org/wiki/CURL) or some plugin for your favorite browser. For example:\r\n* [Postman](https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop) for Chromium-based browsers\r\n* [HttpRequester](https://addons.mozilla.org/en-US/firefox/addon/httprequester/) for Firefox\r\n\r\n### A few examples with `curl`:\r\n\r\n**One message:**\r\n\r\n    $ curl -H \"Content-Type: application/json\" -X POST -d '[\"test\"]' http://localhost:8080/producer/msg?rk=test\r\n\r\n    [\"succeed\"]\r\n\r\n**Two messages/objects:**\r\n\r\n    $ curl -H \"Content-Type: application/json\" -X POST -d '[{\"key\":\"value1\"}, {\"key\":\"value2\"}]' http://localhost:8080/producer/msg?rk=test\r\n\r\n    [\"succeed\",\"succeed\"]\r\n\r\n**Reading data from a file:**\r\n\r\n    $ echo '[\"msg1\", \"msg2\", \"msg3\"]' > test.data\r\n    $ curl -H \"Content-Type: application/json\" -X POST --data-binary \"@test.data\" http://localhost:8080/producer/msg?rk=test\r\n    \r\n    [\"succeed\",\"succeed\",\"succeed\"]\r\n\r\n**Malformed input:**\r\n\r\n    $ curl -H \"Content-Type: application/json\" -X POST -d 'SOMETHING' http://localhost:8080/producer/msg?rk=test\r\n\r\n    {\"timestamp\":\"May 31, 2016 9:14:17 AM\",\"status\":400,\"error\":\"Bad Request\",\"exception\":\"org.springframework.http.converter.HttpMessageNotReadableException\",\"message\":\"Could not read JSON: Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive; nested exception is com.google.gson.JsonSyntaxException: Expected a com.google.gson.JsonArray but was com.google.gson.JsonPrimitive\",\"path\":\"/producer/msg\"}\r\n\r\nYou can open the RabbitMQ's management console and find these messages in a queue.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}